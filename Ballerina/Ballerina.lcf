object SyntAnal5: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Id.types'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id.func'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id.annotation'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id.keyword.other'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id.keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clRed
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 3
      Expression = '[rbuf]? ("|'#39') (\\.|.)*? (\1)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Number'
      StyleName = 'Number'
      TokenType = 4
      Expression = '\b(-)?[0-9.]+\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      Enabled = False
      StyleName = 'Number'
      TokenType = 4
      Expression = '\d+ (\.\d+)? e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      Enabled = False
      TokenType = 4
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Annotation'
      StyleName = 'Id.annotation'
      Expression = '@[a-zA-Z0-9_$]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Single symbol'
      StyleName = 'Symbol'
      TokenType = 2
      Expression = '[\{\}\(\)\[\],;\.\?]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 2
      Expression = '[/\+\-\*:=<'#39'>&/\|\^~!%\#@]+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      EndOfTextClose = True
      DisplayInTree = False
      NameFmt = '%sz0'
      DynHighlight = dhBound
      HighlightPos = cpRange
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id.types'
      StyleName = 'Id.types'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'any'
            'blob'
            'boolean'
            'byte'
            'datatable'
            'error'
            'exception'
            'float'
            'handle'
            'int'
            'json'
            'map'
            'string'
            'var'
            'xml'
            'xmlns')
          TokenTypes = 1
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id.func'
      StyleName = 'Id.func'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'action'
            'connector'
            'function'
            'resource'
            'service'
            'worker')
          TokenTypes = 1
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id.keyword.control'
      StyleName = 'Id.keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abort'
            'aborted'
            'all'
            'bind'
            'break'
            'catch'
            'committed'
            'enum'
            'failed'
            'finally'
            'foreach'
            'fork'
            'import'
            'iterator'
            'join'
            'lengthof'
            'match'
            'next'
            'retries'
            'return'
            'returns'
            'some'
            'throw'
            'timeout'
            'transaction'
            'try'
            'typeof'
            'while'
            'with')
          TokenTypes = 1
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id.keyword.other'
      StyleName = 'Id.keyword.other'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'annotation'
            'as'
            'attach'
            'const'
            'create'
            'documentation'
            'endpoint'
            'false'
            'import'
            'lock'
            'native'
            'new'
            'package'
            'parameter'
            'public'
            'reply'
            'struct'
            'transformer'
            'true'
            'type'
            'version')
          TokenTypes = 1
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id.keyword.modifier'
      StyleName = 'Id.keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'else'
            'if')
          TokenTypes = 1
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Tag block rule 1'
      Enabled = False
      ConditionList = <>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    'import ballerina/io;'
    ''
    
      '// Define an abstract object called '#39'Person'#39'. It should only des' +
      'cribe the '
    
      '// type of each field and method. Note that an abstract object c' +
      'annot have'
    '// a constructor method, or any attached functions.'
    'type Person abstract object {'
    '    public int age;'
    '    public string firstName;'
    '    public string lastName;'
    ''
    
      '    // Function declarations can be within the object. But the f' +
      'unction cannot '
    '    // have a body.'
    '    function getFullName() returns string;'
    ''
    '    function checkAndModifyAge(int condition, int a);'
    '};'
    ''
    
      '// Define a non-abstract object called '#39'Employee'#39', which is stru' +
      'cturally equivalent'
    
      '// to '#39'Person'#39'. Note that a non-abstract object cannot have any ' +
      'member functions '
    '// without a body.'
    'type Employee object {'
    '    public int age;'
    '    public string firstName;'
    '    public string lastName;'
    ''
    '    // Non-abstract object can have a constructor method.'
    '    new(age, firstName, lastName) {'
    '    }'
    ''
    '    // Member function should have a body.'
    '    function getFullName() returns string {'
    '        return firstName + " " + lastName; '
    '    }'
    ''
    '    // Otherwise must be defined outside.'
    '    function checkAndModifyAge(int condition, int a);'
    '};'
    ''
    '// Implement the declared function.'
    'function Employee::checkAndModifyAge(int condition, int a) {'
    '    if (self.age < condition) {'
    '        self.age = a;'
    '    }'
    '}'
    ''
    'public function main() {'
    
      '    // An abstract object type cannot be initialized. It does no' +
      't have '
    '    // an implicit initial value.'
    ''
    
      '    // Initialize a value using the non-abstract object '#39'Employe' +
      'e'#39','
    
      '    // and then assign the value to the abstract object type var' +
      'iable.'
    '    Person p = new Employee(5, "John", "Doe");'
    '    io:println(p.getFullName());'
    ''
    '    p.checkAndModifyAge(10, 50);'
    ''
    '    io:println(p);'
    '}')
  TokenTypeNames.Strings = (
    'Id'
    'Comment'
    'Symbol'
    'String'
    'Number')
  Extentions = 'bal'
  LexerName = 'Ballerina'
  ParseEndOfLine = True
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
